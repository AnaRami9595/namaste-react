----------Notes✏️--------

🔵------------ What is NPM?🎁 ------------

It is NOT Node package management
It manages packages but it doesn't stand for that. It a standard repository for all packages.
Any package you need to include in your code, you can use npm.

    🤔How can you make your project use NPM?
    let's make our project use normaldo

        💻"npm init"
        entry point: (index.js)

🔵------------ What is package.json🎊 ------------

It is a configuration for NPM🎁

    🤔 Why do we need it?
    Our project depends of a lot of packages, those packages our project is depending upon,  are called
    Dependencies⛓️. NPM🎁 manages that. NPM🎁 will take care of the version of that package.

🔵------------ Dependencies⛓️ ------------

We are going to install the most important package in our project: A Bundler📚

    🤔What is a Bundler📚
    Our whole code needs to be bundled together, neat before send to production. A Bundler📚 helps you
    do that. Webpack, Parcel📦, are exemples of Bundlers📚. They package your app properly so it can be
    send to production. When you use the create-react-app command, it uses Webpack and Babel
    behind the scenes. In our project we will be using Parcel📦.

        💻"npm install -D parcel"
        //To Install Parcel📦 in our project 

    🤔What does the "-D" mean??
    There are 2 types of Dependencies⛓️: Normal Dependency⛓️ and Dev 🤓 Dependency⛓️

        - A Dev🤓 Dependency⛓️ is regularly required when we are Building our app.
        We will use Parcel📦 as a Dev🤓 Dependency⛓️ to build our app in our development phase
        with the expression "npm install -D parcel" we are informing NPM🎁 That we will use
        this Bundler📚 as a Dev🤓 Dependency⛓️, therefore the "-D".
        We are fetching Parcel📦 from NPM🎁, which manages ALL the packages!!

        - A normal Dependencies⛓️ is used in production also.

    Now that we installed Parcel📦, it shows on package.json🎊 as a Dependency⛓️: "

        💻"devDependencies": {
        "parcel": "^2.9.3"
        }

    🤔What does the "^" mean?? (TANGENT!!!)
    This symbol is known as Caret.  In a package.json🎊 file, both "^" and "~" are used
    as part of version range specifiers for declaring the allowed range of versions for a
    package's Dependency⛓️. They are used to manage version compatibility when installing and
    updating packages.

    💡Here's the difference between "^" and "~"

        ⏹️1. Caret ("^")
        When you use the caret symbol "^" you're specifying a version range that allows for
        non-breaking  updates. It will update to any version that is compatible with the specified
        version but avoids breaking changes. The caret taes the highest compatible version that is
        not considered a breaking change. Always include this symbol in your versions ❗

        For example, in this case we are usin Parcel📦 version "^2.9.3" it means any version from
        "2.9.3" up to, but NOT including "3.0.0" is allowed, so it might install "2.8.3", but not
        "3.0.0"

        ⏹️2. Tilde ("~")
        When you use the tilde symbol ("~") you're specifying a version range that allows for patch
        updates. It will update to any version that is compatible with the specified version, but it
        won't allow updates that include new minor versions. Only patches (Bug🪲 fixes) are allowed
        within the same minor version.

        For example, if we specified our Parcel📦 version as "~2.9.3" it means any version from
        "2.8.3" up to, but not including "2.9.0". So it has less flexibility than Caret ("^").


    🤔What does "package-lock.json🎊" do?
    Now we have a new json🎊 file!! "package-lock.json🎊",🤔 what is the difference with the
    other package "package.json🎊"?

    💡Here's the difference between "package-lock.json🎊" and "package.json🎊"

        ⏹️1. "package.json🎊"
        Like we mentioned, is a configuration file for NPM🎁, It keeps track of the range of
        versions of the packages that are installed into our system.

        - It contains metadata  about your project. Including its name, version, description, author,
        license.

        - Also the "scripts" section allows you to define custom commands that can be executed using
        "npm run <script-name>". This is commonly used for tasks like building, testing and running
        the app.

        -The most important thing: includes the list of Dependencies⛓️ your project relies on, along
        with the version ranges required for those packages. These version ranges are used y npm to
        determine which versions of Dependencies⛓️ to install when you run "npm  install.
        However, these ranges can sometimes lead to inconsistencies if not managed properly, which is
        where "package-lock.json🎊" comes in.

        ⏹️2. "package-lock.json🎊"
        It keeps track of ALL Dependencies⛓️
        Introducedd in npm version5, the "package-lock.json🎊" file is automatically generated and
        updated whenever you install or modify Dependencies⛓️ in your project. It locks down the
        specific versions of all installed packages, along with their sub-dependencies, to ensure
        that the same versions are used consistently across different enviroments and installations,
        ensuring consistency and predictability during development and deployment.

    🤔What does "node_modules🔰" do?
    When we installed Parcel📦, a folder "node_modules🔰" was generated in our project. It contains
    all the code that we fetched from NPM🎁.  So "package.json🎊: contains the METADATA for NPM🎁 but
    "node_modules🔰" contains the actual DATA of our Dependencies⛓️ Is like a Data base.
    The file is so huge is kind of a meme 😅.

    🤔"node_modules🔰" includes a Parcel📦 file, but what do we have so many files if we only want Parcel📦?
    It comes like this because Parcel📦 as a project has its own Dependencies⛓️ and those Dependencies⛓️
    have their own,

        💡those are called TRANSITIVE Dependencies⛓️❗
        also known as indirect Dependencies⛓️, those are Dependencies⛓️ that your project Dependencies⛓️
        rely on. The Dependencies⛓️ of your Dependencies⛓️

    Parcel📦 is a beast and, can't work on it's own! It also uses Babel🗣️, browsers, etc. Those are coming
    from NPM🎁, which manages all the packages!!

    🤔How does NPM🎁 know that Parcel📦 has its own Dependencies⛓️?
    Every dependency and TRANSITIVE Dependency⛓️ included in our "node_modules🔰" file has a "package.json🎊"
    and a "package-lock.json🎊" of its own that manage their own Dependencies⛓️. "node_modules🔰" is a collection
    of our Dependencies⛓️.

    🤔When pushing our project to Git🐈‍⬛, should we add the "node_modules🔰" file?
    NO! Since it's huge as compared  to the sice of our code.

    - The Best Practice✅ is to put node_modules🔰 inside a file called ".gitignore🛑"
      Inside ".gitignore🛑" we write

                💻"/node_modules/"

    - However, "package.json🎊" and a "package-lock.json🎊" should be sent to production and we need to add them
      to our Git🐈‍⬛ push. Because mantain a metadata of all the dependencies our project need to funtion. So
      Whatever is in our local needs to be  sent to production. But remember, no "node_modules🔰".
      If you have "package.json🎊" and a "package-lock.json🎊", you can recreate aaaall the necessary "node_modules🔰".

      If you delete the "node_modules🔰".  file, you can install it later using 💻"npm install" in my repository.

        💡Remember: A rule of thumb is, if you can recreate anything later DON'T put it on Git🐈‍⬛, if you CAN'T recreate
        it, PUT IT ON Git🐈‍⬛. Git must only carry essential things❗

🔵------------ Build our App using Parcel📦 ------------

Terminal:

            💻"npx parcel index.html"
            //Parcel📦 will create a server for us called  http://localhost:1234
            //💡The NPX💣 is a command to execute a package. NPM🎁 is for installing a package❗

    🤔What is NPX💣 and NPM🎁 used for?

        ⏹️1.  NPM🎁
        Like the CDN Links we used in our "index.html" file, NPM🎁 can be used to inject react in our
        project.
        ❗Using CDN codes is NOT a good way to bring REACT⚛️ in our project, because fetching from CDN is a costly
        operation: it makes an external call to get it, the best thin would be if it was already stored
        locally inside our package.json🎊

        💡In order to get REACT⚛️ locally we install it to our project using:

            💻"npm install react"
            //❗Notice that we did not include the "-D" in our command, that is because we need react
            as a normal Dependency, not as a Dev🤓 Dependency⛓️

        💡Just like we imported ReactDOM📃 using CDN links, we also needd to import ReactDOM📃 using NPM🎁
        If that is the way we are going to get it. So we install it:

            💻"npm install react-dom"
            //sometimes we can see it as npm i react-dom, is an abreviation.
            //❌This brings an error in the console "Uncaught ReferenceError: React is not defined" 😱
            //🤔How do we fix this??

        💡See, we only INSTALLED REACT⚛️ package in our node modules, but our code does not have it.
        🤔How do I use it in my code? Inside App.js, at the top of the page,
        we import REACT⚛️ from the "node_modules🔰" directory.

            💻"import React from "react";"
            //We are getting it from the REACT⚛️ folder called "react" that is inside our node_modules🔰

        💡We also need to import ReactDOM📃 from our node_modules🔰 so we write

            💻"npm install react-dom"//In the terminal
            💻""import ReactDOM from "react";//⬅️This we write to import ReactDOM📃 To App.js
            //❌This brings an error in the console "@parcel/transformer-js: Browser scripts cannot have imports or exports" 😱
            //❌It also indicates that the error is here "<script src="App.js">"
            //🤔What does it mean??

        💡Basically, on our "index.html" file we are injecting Javascript🟨 using the tag  "<script src="App.js">"
        so the Browser🌍 treats this script as a normal Javascript🟨 file, but it is not, because is REACT⚛️ and
        normal Javascript🟨 Does not do imports like "import React from "react". So we need to tell our Browser🌍
        that this file is not a normal Javascript🟨 file, is a MODULE📁, we tell it writing inside "index.html":

            💻"<script type= "module" src="App.js">"
            //now react work and our page looks as expected
            //Now, every time we update our code, our Browser🌍 is automatically refreshed thanks to Parcel📦:

🔵------------ Parcel📦 ------------

How does it work?

        💡The powers of Parcel📦:

        -Bundler📚

        -Parcel just created a Dev Build for you

        -It also created a local server for you

        -HMR🔥 =  Hot Module Replacement. This is what automatically refreshes our page. It does that because it
         has a File wathing Algorithm that is written in C++, that keeps track of all our files.

        -Caching 🕸️ Faster Builds because of caching. It takes less and less time to build, because of the file
         ".parcel-cache🕸️" that generates inside our main folder, so that the next app Builds develop faster.
         The same code is never built twice.

        -Image Optmization🖼️

        -Minification of our file

        -File Compressing🗃️

        -Consistent Hashing 🕧 = Is like a clock that helos decide which computer should take care of storing and
        finding different pieces of data. Is a smar way to balance the work among the computers and make sure that
        things keep running smoothly, even when the group of computers changes over time.

        -Code Splitting

        -Differential Bundling = can Bundle📚 the app so it is compatible for different type of app and Browsers🌍

        -Diagnostincs behind the scenes 🩻

        -Error Handling ✖️

        -Gives you the option to work in HTTPs

        -Tree Shaking Algorithm🎄 - will remove unused code for you

        -Different  Dev🤓 and Production👷🏻‍♀️ Bundles📚, If you would like to execute a Production👷🏻‍♀️ Build you can write:
         in the terminal

                💻"npx parcel build index.html"
                //In our current app, this will give us an Error❌ because inside our "package.json🎊" file we have our main
                //as "main": "App.js" which is a way to tell npm that is our entry point to our app

                💡Important!!!! You don't need "main": "App.js", when you're using Parcel📦, so remove it!!
                it was originaly under "description".


        REACT⚛️ is not fast in itself, it uses Parcel📦 and other Bundlers📚 to be fast. And they use Dependencies⛓️
        to work better

    🤔What is the "dist📂" folder that is generated in our app?
    Parcel📦 and REACT⚛️ will make their magic and send the resulting code to the dist📂 folder, the content inside the
    dist📂 folder is what is showing up in the Browser🌍.

    When you execute NPX💣 in Parcel📦 using "npx parcel index.html" it genereates a Dev🤓 build for your project,
    and it host it, when is generating the code, puts it inside the dist📂 folder. If you make a Production👷🏻‍♀️ build. It
    generates a dist📂 file for its own, which is heavier and includes additional html files, css, js, that will serve
    as a compressing of all our modules that we write, is the Production👷🏻‍♀️ ready version of your code.

    🤔Can we recreate the ".parcel-cache🕸️" folder??
    Yes!! if it's deleted, you can always regenerate it using the NPX💣 command "npx parcel index.html" or
    "npx parcel build index.html". Remember, anything that can be reacreated later we don't have to push to Git🐈‍⬛, so
    we'll add it to .gitignore🛑

🔵------------ Git 🐈‍⬛ ------------

We usually push our code from 
        
        Our Local Server🧑🏻‍💻 ➡️➡️➡️ to Git🐈‍⬛ ⬅️⬅️⬅️ Which is deployed to a Server🖲️, (that fetches the code from Git🐈‍⬛)
        Then, the code goes from the  Server🖲️ ➡️➡️ to the User 👤
        
        -All the commands that we write from our Local Server🧑🏻‍💻 (npx parcel, etc) will be able to be used in the Server🖲️ also.
        -We will send package.json🎊 to Git🐈‍⬛ but not our node_modules🔰, since the Server🖲️ has their own node_modules🔰 copy.
        -Inside the Server🖲️, they also have their own dist📂 folder, so we don't need to push it, we'll save it inside gitignore🛑


🔵------------ Let's make our app compatible for all the versions of Browsers🌍 ------------

In order to do that we'll need to use an NPM🎁 package called browserslist📂, that it can be found inside node_modules, 
we need to tell browserslist📂 what browser do I need to support my app.
Akshay👨🏾‍🦱 recommends the website 🌐https://browserslist.dev/ to know the stadistics of users with latests version of Browsers🌍
Browsers🌍 List is a great tool to reach as much as people as possible

        1. Inside our package.json🎊 file we need to add the following at the end:

                    💻"browserslist": [
                        "last 2 Chrome version",
                        "last 2 Firefox versions"
                        "last 2 versions"//for all the browsers
                    ]

    
//Our App.js looks like this now:

                       🖥️ import React from "react";
                        import ReactDOM  from "react-dom";


                        const parent = React.createElement("div", { id: "parent" }, [
                            React.createElement("div", {id:"child"}, [
                                React.createElement("h1", {}, "I'm an h1 tag"),
                                React.createElement("h2", {}, "I'm an h2 tag")
                        ]),
                        React.createElement("div", {id:"child2"}, [
                            React.createElement("h1", {}, "I'm another h1 tag"),
                            React.createElement("h2", {}, "I'm another h2 tag")
                        ]),
                        ]);

                        console.log(parent)

                        const root = ReactDOM.createRoot(document.getElementById("root"));

                        root.render(parent)


