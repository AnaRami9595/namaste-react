----------Notes✏️--------

🔴---What is NPM?🎁---
It is NOT Node package management
It manages packages but it doesn't stand for that. It a standard repository for all packages.
Any package you need to include in your code, you can use npm.

    🤔How can you make your project use NPM?
    let's make our project use normaldo

        "npm init"
        entry point: (index.js)

🔴---What is package.json🎊---
It is a configuration for NPM🎁

    🤔 Why do we need it?
    Our project depends of a lot of packages, those packages our project is depending upon,  are called
    Dependencies⛓️. NPM🎁 manages that. NPM🎁 will take care of the version of that package. 

🔴---Let's start our Dependencies⛓️---
We are going to install the most important package in our project: A Bundler📚

    🤔What is a Bundler📚
    Our whole code needs to be bundled together, neat before send to production. A Bundler📚 helps you
    do that. Webpack, Parcel📦, are exemples of Bundlers📚. They package your app properly so it can be 
    send to production. When you use the create-react-app command, it uses Webpack and Babel
    behind the scenes. In our project we will be using Parcel📦.

        💻To Install Parcel📦 in our project we use: "npm install -D parcel"

    🤔What does the "-D" mean??
    There are 2 types of Dependencies⛓️: Normal Dependency⛓️ and Dev 🤓 Dependency⛓️

        - A Dev🤓 Dependency⛓️ is regularly required when we are Building our app.
        We will use Parcel📦 as a Dev🤓 Dependency⛓️ to build our app in our development phase
        with the expression "npm install -D parcel" we are informing NPM🎁 That we will use
        this Bundler📚 as a Dev🤓 Dependency⛓️, therefore the "-D".
        We are fetching Parcel📦 from NPM🎁, which manages ALL the packages!!

        - A normal Dependencies⛓️ is used in production also. 
    
    Now that we installed Parcel📦, it shows on package.json🎊 as a Dependency⛓️: "  
    
        💻"devDependencies": {
        "parcel": "^2.9.3"
        }

    🤔What does the "^" mean?? (TANGENT!!!)
    This symbol is known as Caret.  In a package.json🎊 file, both "^" and "~" are used
    as part of version range specifiers for declaring the allowed range of versions for a 
    package's Dependency⛓️. They are used to manage version compatibility when installing and
    updating packages.

    💡Here's the difference between "^" and "~"

        ⏹️1. Caret ("^")
        When you use the caret symbol "^" you're specifying a version range that allows for 
        non-breaking  updates. It will update to any version that is compatible with the specified
        version but avoids breaking changes. The caret taes the highest compatible version that is 
        not considered a breaking change. Always include this symbol in your versions ❗

        For example, in this case we are usin Parcel📦 version "^2.9.3" it means any version from
        "2.9.3" up to, but NOT including "3.0.0" is allowed, so it might install "2.8.3", but not
        "3.0.0"

        ⏹️2. Tilde ("~")
        When you use the tilde symbol ("~") you're specifying a version range that allows for patch
        updates. It will update to any version that is compatible with the specified version, but it
        won't allow updates that include new minor versions. Only patches (Bug🪲 fixes) are allowed
        within the same minor version.

        For example, if we specified our Parcel📦 version as "~2.9.3" it means any version from 
        "2.8.3" up to, but not including "2.9.0". So it has less flexibility than Caret ("^").
    

    🤔What does "package-lock.json🎊" do?
    Now we have a new json🎊 file!! "package-lock.json🎊",🤔 what is the difference with the 
    other package "package.json🎊"?

    💡Here's the difference between "package-lock.json🎊" and "package.json🎊"

        ⏹️1. "package.json🎊"
        Like we mentioned, is a configuration file for NPM🎁, It keeps track of the range of
        versions of the packages that are installed into our system. 
        
        - It contains metadata  about your project. Including its name, version, description, author,
        license.

        - Also the "scripts" section allows you to define custom commands that can be executed using
        "npm run <script-name>". This is commonly used for tasks like building, testing and running
        the app.

        -The most important thing: includes the list of Dependencies⛓️ your project relies on, along
        with the version ranges required for those packages. These version ranges are used y npm to 
        determine which versions of Dependencies⛓️ to install when you run "npm  install.
        However, these ranges can sometimes lead to inconsistencies if not managed properly, which is
        where "package-lock.json🎊" comes in.

        ⏹️2. "package-lock.json🎊"
        It keeps track of ALL Dependencies⛓️
        Introducedd in npm version5, the "package-lock.json🎊" file is automatically generated and 
        updated whenever you install or modify Dependencies⛓️ in your project. It locks down the 
        specific versions of all installed packages, along with their sub-dependencies, to ensure 
        that the same versions are used consistently across different enviroments and installations,
        ensuring consistency and predictability during development and deployment.

    🤔What does "node_modules🔰" do?
    When we installed Parcel📦, a folder "node_modules🔰" was generated in our project. It contains
    all the code that we fetched from NPM🎁.  So "package.json🎊: contains the METADATA for NPM🎁 but
    "node_modules🔰" contains the actual DATA of our Dependencies⛓️ Is like a Data base. 
    The file is so huge is kind of a meme 😅.

   🤔"node_modules🔰" includes a Parcel📦 file, but what do we have so many files if we only want Parcel📦?
   It comes like this because Parcel📦 as a project has its own Dependencies⛓️ and those Dependencies⛓️
   have their own, 
            
        💡those are called TRANSITIVE Dependencies⛓️❗
        also known as indirect Dependencies⛓️, those are Dependencies⛓️ that your project Dependencies⛓️
        rely on. The Dependencies⛓️ of your Dependencies⛓️

    Parcel📦 is a beast and, can't work on it's own! It also uses Babel🗣️, browsers, etc. Those are coming 
    from NPM🎁, which manages all the packages!!

    🤔How does NPM🎁 know that Parcel📦 has its own Dependencies⛓️?
    Every dependency and TRANSITIVE Dependency⛓️ included in our "node_modules🔰" file has a "package.json🎊"
    and a "package-lock.json🎊" of its own that manage their own Dependencies⛓️. "node_modules🔰" is a collection
    of our Dependencies⛓️.

    🤔When pushing our project to Git🐈‍⬛, should we add the "node_modules🔰" file? 
    NO! Since it's huge as compared  to the sice of our code. 
    
    - The Best Practice✅ is to put node_modules🔰 inside a file called ".gitignore🛑"
      Inside ".gitignore🛑" we write "/node_modules"

    - However, "package.json🎊" and a "package-lock.json🎊" should be sent to production and we need to add them
      to our Git🐈‍⬛ push. Because mantain a metadata of all the dependencies our project need to funtion. So
      Whatever is in our local needs to be  sent to production. But remember, no "node_modules🔰". 
      If you have "package.json🎊" and a "package-lock.json🎊", you can recreate aaaall the necessary "node_modules🔰". 

      If you delete the "node_modules🔰".  file, you can install it later using 💻"npm install" in my repository.

        💡Remember: A rule of thumb is, if you can recreate anything later DON'T put it on Git🐈‍⬛, if you CAN'T recreate
        it, PUT IT ON Git🐈‍⬛. Git must only carry essential things❗








    








