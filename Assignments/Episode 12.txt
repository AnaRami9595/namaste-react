

⚫------Theory
    🔹useContext vs Redux.

        • `useContext🫙` and Redux🤏 are both state☁️ managment
        solutions for REACT⚛️ applications, but they have
        different use cases and approaches. Here's a comparison 
        of the two:
            · Complexity
                - useContext🫙: It is a part of React's core library📚 
                and is relatively simple to set up and use. You 
                can manage local state within a component🧩 or 
                share state among a few components🧩 without
                introducing a lot of overhead.

                - Redux🤏: It is a more complex state☁️ managment 
                library. It comes with a set of conventions, including
                actionz🎬, reducers✂️, and a centralized store🏪.
                It is designed for managing larger, global states☁️
                in your application.

            · Use Case:
                - useContext🫙: It is best suited for managing local
                component-level state☁️ or sharing state between a 
                few components that are close in the component🧩 '
                Tree, but not for global state managment.

                - Redux🤏: It is designed for managing global state
                that needs to be accesed and modified from various parts 
                of your application. It's particularly useful for complex 
                applicatrions with many components that need access to 
                the same Data🧮.

            · Use Case:
                - useContext🫙:It typically involves less boilerplate
                code because it is integrated into REACT⚛️ and doesn't 
                require as many additional libraries or patterns.

                - Redux🤏:  is designed for high-performane state
                managment. It efficiently manages and updates globalstate, 
                making it suitable for large and complex applications.

            · Ecosystem and Community:
                - useContext🫙: is a part of React's official API, so 
                it's well supported and widely used. However, the Ecosystem
                around useContext🫙 is not as extensive as Redux🤏,

                - Redux🤏:Redux has a mature ecosystem with a wide range
                of middleware, tools and libraries to extend its capabilities,
                such as redux thunk for handling asynchronous actions
                and Redux🤏 DevTools🔨 for debugging 

        In summary, if you have a simple applicatopn with relatively small-scale
        state managment needs, useContext🫙 can be a straightforward and efficient
        choice. However, for larger and more complex applications with extensive
        global state managment requirements, Redux provides a structured and 
        well-stablished solution. Additional, you can use Redux toolkit🔨, which
        simplifies Redux configuration and reduces boilerplate. The 
        choice betwen useContext🫙 and Redux🤏 ultimately depends on the needs 
        of your project. 




    🔹 Advantages of using Redux Toolkit over Redux.
    Redux toolkit🔨 is a library that simplifies and streamlines the development
    of applications using Redux for state☁️ management. It is built on top of
    Redux, making it a popular choice for managing state in REACT⚛️ applications,
    here are some of the Advantages of using Redux toolkit🔨 over Redux🤏.

        • Reduced Boilerplate: toolkit🔨 significanly reduces the amount
        of boilerplate code required to set up a Redux🤏 store🏪.

        • Concise Syntax: With Redux toolkit🔨, you can define reducers✂️
        using a more concise and straightforward syntax. You no longer 
        need to write extensive swith-case statements and the createSlice🍕
        function📽️ Generates action creators and reducers✂️ with minimal code

        • Async action🎬 handling: toolkit🔨 provides a built-in way to handle 
        asynchronous ations using the createAsyncThunk functions📽️

        • Normalization and Data slices🍕: Redux🤏 toolkit🔨 encourages the
        use of normalized data structires and slices to manage specific parts
        of the state. This promotes a more organozed and efficient approach
        to state managment, specialy in applications with complex data
        structures

        • DevTools🔨 Integration: Redux DevTools🔨 Extension, which is used
        for debugging Redux🤏 applications, woks seamlesly with Redux Toolkit.
        This makes it easier to inspect and debug the state☁️ changes and
        actions🎬 in your application.

        • Immutable State by Defaul:toolkit🔨 encourages Immutable state changes
        and follows best practices for Redux🤏

        • Built-in Type Definitions: Refux Toolkit includes Typescript
        type definitions out of the box. This ensures better tupe safety and
        helps catch errors at compile-time.

        • Easy integration with Existing code
        • Community adoption. 

    🔹Explain Dispatcher.

        • The central piece of Redux🤏 is the store🏪. The store holds the 
        application's state,and actions are dispatched to it to modify 
        the state.

        Here's how it works:

            · Actions🎬:
              actions🎬 are plain JS🟨 obkects that describe an event or
              intention to change the state, they typically have a `type`
              property that defines the action type and may include 
              additional data.

            · Reducer✂️: 
              reducers✂️ are functions that take the current state☁️ and an 
              action as an arguments and return a new state☁️. They specify
              how the state☁️ should change in response to different actions🎬 

            · Store🏪: The store is an object that holds the application'state
              and is responsible for managing the state and handling the dispatching
              of actions. You create a store by passing a root reducer✂️ function 
              to the `createStore` function📽️ provided by Redux🤏.

            · Dispatch:
              The process of sending an action to the store is referred to as
              dispathing. You call `store.dispatch(action)` to send an action
              to the store.
              
            The store handles the dispatching of actions and calls the reducer✂️ with
            the current state and the action🎬 and returns a new state☁️, which
            becomes the new state☁️ of the store. This change in the state triggers
            react components connected to the store to re-render, updating the UI🖼️

            So, while Redux doesn't explicitly have a concept called a dispatcher, 
            the dispatching of actions is afundamental aspect of how redux manages 
            state changes.

    🔹Explain Reducer.
        • A reducer is a pure JS🟨 function📽️ responsible for specifying
        how an application's sate should change in response to dispatched 
        actions. It takes two argumens: the current state and an action.
        The reducer examines the action's tupe and, based on that type,
        determines how to update the state.

    🔹Explain slice.
        • In Redux toolkit🔨, a slice🍕 is a concept that simplifies the
        process of defining a piece of the application state and the 
        assosiated reducers and actions. Slices are created using the 
        createSlice🍕 function📽️ provided by Redux toolkit🔨

        A slice🍕 typically includes:
            1· Reducers✂️: they specify how a particular part of
            the state☁️ should change in response to the dispatched
            actions. The createSlice🍕 function📽️ genetates these
            reducers✂️ for you based on the initial state☁️ and
            a set of action creators you define

            2· Action🎬 creators: Action creators are generated for 
            each action type defied within the slice. These action 
            creators allow you to create and dispatch actions without 
            manually specifying the action type each time.


             3· Initial state☁️: the initial state of the slice,

        slices🍕 make it easier to organixe and manage your Redux🤏
        state and actions, reduing the boilerplate and making it more
        mantainable and efficient.



    🔹Explain selector.

        • In Redux, a selector is a function that retrieves and
        transforms data from the Redux🤏 store. Selectiors are 
        typically used to extract some specific pieces of state
        or perform derived computations on the state. 

        the main purpose of selectors is to abstract the structure
        of the state and encapsulate the logic for retrieving 
        speecific data. 

    🔹Explain createSlice and the configuration it takes.

        • The createSlice🍕 function is used to define a slice🍕
        of your Redux🤏 state, along with the assosiated reducers
        and action creators. It simplifies and streamlines the
        process of creating reducers and actions.  

        Here's a breakdown of the configuration options for
        `createSlice🍕:  

            1· `name`: a string that names your slice.
            2· `initialState`: This is the initial state of your
                slice🍕. It is an object that represents the
                starting data for this part of your Redux🤏 Store🏪
            3·`reducers`: An object where each key represents an
                action type and the associated value is a reducer✂️
                function. These reducer✂️ functions📽️ describe 
                how the state should change in response to The
                dispatched actions🎬. They take the current state
                and action🎬 as arguments and can modify the state
                in an immutable way, The `state` parameter is A
                special object provided by toolkit🔨 that you can 
                directy mutate to update the state.

        One you've defiened your slice🍕 using `createSlice🍕`
        you can access the generated reducer✂️ and action🎬 
        creators.
        Redux🤏 toolkit's🔨 createSlice🍕 simplifies the process
        of defining Redux🤏 slices🍕, reducing boilerplate and
        making it more straightforward to work with actions and
        reducers.



⚫------Coding
• Practice making a store, and slices and do read and write operations using Redux Store • Build Cart Flow using Redux Store